apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'

if (!hasProperty('DISABLE_ERROR_PRONE')) {
    apply plugin: "net.ltgt.errorprone"
}

dependencies {
    api project(':third_party:gif_decoder')
    api project(':third_party:disklrucache')
    api project(':annotation')
    api "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
    compileOnly "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
    testImplementation project(':testutil')
    testImplementation 'com.google.guava:guava-testlib:18.0'
    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
    testImplementation "junit:junit:${JUNIT_VERSION}"
    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
    testImplementation "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"

    if (project.plugins.hasPlugin('net.ltgt.errorprone')) {
        errorprone "com.google.errorprone:error_prone_core:${ERROR_PRONE_VERSION}"
    }
}

android.testOptions.unitTests.all { Test testTask ->
    // configure max heap size of the test JVM
    testTask.maxHeapSize = TEST_JVM_MEMORY_SIZE as String
    if (JavaVersion.current() <= JavaVersion.VERSION_1_7) {
        // Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=2048m; support was removed in 8.0
        testTask.jvmArgs "-XX:MaxPermSize=${TEST_JVM_MEMORY_SIZE}"
    }
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionName VERSION_NAME as String
        consumerProguardFiles 'proguard-rules.txt'
    }

    buildTypes {
        debug {
            testCoverageEnabled = false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

afterEvaluate {
    if (tasks.findByName("assembleDebug") == null) {
        return
    }

    findbugs {
        toolVersion FINDBUGS_VERSION
    }

    tasks.create('findbugs', FindBugs) {
        dependsOn tasks.assembleDebug

        description 'Run findbugs'
        group 'verification'

        classes = fileTree("${project.buildDir}/intermediates/classes/debug/")
        source android.sourceSets.main.java.srcDirs
        classpath = files()
        doFirst {
            classpath += classPathForQuality()
        }
        effort = 'max'
        excludeFilter = file("findbugs-exclude.xml")

        // Failures are caught and printed by the violations plugin.
        ignoreFailures = true

        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    check.dependsOn('findbugs')

    pmd {
        toolVersion PMD_VERSION
    }

    tasks.create('pmd', Pmd) {
        targetJdk = TargetJdk.VERSION_1_7

        description 'Run pmd'
        group 'verification'

        // If ruleSets is not empty, it seems to contain some
        // defaults which override rules in the ruleset file...
        ruleSets = []
        ruleSetFiles = files('pmd-ruleset.xml')
        source android.sourceSets.main.java.srcDirs
        classpath = files()
        classpath += files("${project.buildDir}/intermediates/classes/debug/")
        doFirst {
            classpath += classPathForQuality()
        }

        //TODO enable this once new Gradle containing this flag is out
        //see https://github.com/gradle/gradle/pull/3125#issuecomment-352442432
        //incrementalAnalysis = true

        // Failures are caught and printed by the violations plugin.
        ignoreFailures = true

        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    check.dependsOn('pmd')
}

def classPathForQuality() {
    return files(
            android.bootClasspath,
            project.configurations.compile,
            project.android.libraryVariants.collect { it.javaCompile.classpath }
    )
}

apply from: "${rootProject.projectDir}/scripts/upload.gradle"
