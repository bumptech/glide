apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

dependencies {
    api project(':third_party:gif_decoder')
    api project(':third_party:disklrucache')
    api project(':annotation')
    api "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
    compileOnly "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
    testImplementation project(':testutil')
    testImplementation 'com.google.guava:guava-testlib:18.0'
    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
    testImplementation "junit:junit:${JUNIT_VERSION}"
    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
    testImplementation "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
}

android.testOptions.unitTests.all { Test testTask ->
    // configure max heap size of the test JVM
    testTask.maxHeapSize = TEST_JVM_MEMORY_SIZE as String
    if (JavaVersion.current() <= JavaVersion.VERSION_1_7) {
        // Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=2048m; support was removed in 8.0
        testTask.jvmArgs "-XX:MaxPermSize=${TEST_JVM_MEMORY_SIZE}"
    }
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionName VERSION_NAME as String
        consumerProguardFiles 'proguard-rules.txt'
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

afterEvaluate {
    if (tasks.findByName("assembleDebug") == null) {
        return
    }

    findbugs {
        toolVersion FINDBUGS_VERSION
    }

    tasks.create('findbugs', FindBugs) {
        dependsOn tasks.assembleDebug

        description 'Run findbugs'
        group 'verification'

        classes = fileTree("${project.buildDir}/intermediates/classes/debug/")
        source android.sourceSets.main.java.srcDirs
        classpath = project.configurations.compile
        classpath += files(android.bootClasspath)
        doFirst {
            it.classpath +=
                    files(project.android.libraryVariants.collect {
                        it.javaCompile.classpath.files
                    })
        }


        effort = 'max'

        excludeFilter = file("findbugs-exclude.xml")

        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    check.dependsOn('findbugs')

    pmd {
        toolVersion PMD_VERSION
    }

    tasks.create('pmd', Pmd) {
        targetJdk = TargetJdk.VERSION_1_7

        description 'Run pmd'
        group 'verification'

        // If ruleSets is not empty, it seems to contain some
        // defaults which override rules in the ruleset file...
        ruleSets = []
        ruleSetFiles = files('pmd-ruleset.xml')
        source android.sourceSets.main.java.srcDirs

        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    check.dependsOn('pmd')

    jacoco {
        toolVersion JACOCO_VERSION
    }
    coveralls {
        jacocoReportPath = "${project.buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }

    tasks.create("jacocoTestReport", JacocoReport) {
        dependsOn tasks.testDebugUnitTest
        def coverageSourceDirs = android.sourceSets.main.java.srcDirs
        group = "Reporting"
        description = "Generate Jacoco coverage reports"

        classDirectories = fileTree(
                dir: "${project.buildDir}/intermediates/classes/debug",
                excludes: ['**/R.class',
                           '**/R$*.class',
                           '**/BuildConfig.*',
                           '**/Manifest*.*',
                           '**/BitmapRequestBuilder.class',
                           '**/DrawableRequestBuilder.class',
                           '**/GifRequestBuilder.class',]
        )

        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        executionData = files("${project.buildDir}/jacoco/testDebug.exec")

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

apply from: "${rootProject.projectDir}/scripts/upload.gradle"
