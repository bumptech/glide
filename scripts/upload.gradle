/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * Based on: https://github.com/mcxiaoke/gradle-mvn-push/blob/master/gradle-mvn-push.gradle.
 *
 * For faster runs add: -x check when building Glide.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

static def localMavenRepo() {
    'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
}

@SuppressWarnings("GrMethodMayBeStatic")
def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('LOCAL') ? localMavenRepo()
            : hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('LOCAL') ? localMavenRepo()
            : hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : 'https://oss.sonatype.org/content/repositories/snapshots/'
}

def getRepositoryUsername() {
    return hasProperty('USERNAME') ? USERNAME : (hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : '')
}

def getRepositoryPassword() {
    return hasProperty('PASSWORD') ? PASSWORD : (hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : '')
}

afterEvaluate { project ->
    def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')
    // To avoid uploading the default empty jar artifact in the project root directory, we use a custom
    // configuration to specify which artifacts we want to upload.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME

                repositories {
                    maven {
                        url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()

                        credentials {
                            username = getRepositoryUsername()
                            password = getRepositoryPassword()

                        }
                    }
                }

                // Dependencies are only automatically included by the release plugin if the release
                // variant is built. Since we've disabled the release variant to improve build
                // times, we need to add the dependencies to the pom file explicitly.
                if (isAndroidProject) {
                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            def groupId = it.group
                            def artifactId = it.name
                            // If we specify an artifact id that differs from the project name, it won't
                            // match. To avoid that, we look up the artifact id (and group) by property
                            // for any project dependencies.
                            // TODO: there must be a neater way to do this.
                            if (it instanceof ProjectDependency) {
                                def properties = it.getDependencyProject().getProperties()
                                groupId = properties.get("GROUP")
                                artifactId = properties.get("POM_ARTIFACT_ID")
                            }
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', groupId)
                            dependencyNode.appendNode('artifactId', artifactId)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }

                pom {
                    name = POM_NAME
                    packaging = POM_PACKAGING
                    description = POM_DESCRIPTION
                    url = POM_URL

                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }

                    licenses {
                        license {
                            name = 'Simplified BSD License'
                            url = 'http://www.opensource.org/licenses/bsd-license'
                            distribution = 'repo'
                        }
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }
                }

                if (isAndroidProject) {
                    def variants = project.android.libraryVariants.findAll {
                        it.buildType.name.equalsIgnoreCase('release')
                    }

                    def getAndroidSdkDirectory = project.android.sdkDirectory

                    def getAndroidJar = "${getAndroidSdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar"

                    task androidJavadocs(type: Javadoc, dependsOn: assembleRelease) {
                        source = variants.collect { it.getJavaCompileProvider().get().source }
                        classpath = files(
                                getAndroidJar,
                                project.file("build/intermediates/javac/release/classes")
                        )
                        doFirst {
                            classpath += files(variants.collect { it.getJavaCompileProvider().get().classpath.files })
                        }
                        options {
                            links("http://docs.oracle.com/javase/7/docs/api/")
                            links("http://d.android.com/reference")
                        }

                        exclude '**/R.java'
                    }

                    def cleanJavadocTask = task("cleanJavadocTask", type: Delete) {
                        delete androidJavadocs.destinationDir
                    } as Task
                    project.clean.dependsOn(cleanJavadocTask)

                    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                        archiveClassifier.set('javadoc')
                        from androidJavadocs.destinationDir
                        archiveBaseName.set("${JAR_PREFIX}${project.name}${JAR_POSTFIX}")
                    }

                    task androidSourcesJar(type: Jar) {
                        archiveClassifier.set('sources')
                        from project.android.sourceSets.main.java.source
                        archiveBaseName.set("${JAR_PREFIX}${project.name}${JAR_POSTFIX}")
                    }

                    task androidLibraryJar(type: Jar, dependsOn: compileReleaseJavaWithJavac /* == variant.javaCompile */) {
                        from compileReleaseJavaWithJavac.destinationDir
                        exclude '**/R.class'
                        exclude '**/R$*.class'
                        archiveBaseName.set("${JAR_PREFIX}${project.name}${JAR_POSTFIX}")
                    }

                    artifact androidLibraryJar
                    artifact androidSourcesJar
                    artifact androidJavadocsJar
                    artifact project.tasks.bundleReleaseAar
                } else if (project.plugins.hasPlugin('java-platform')) {
                    from components.javaPlatform
                } else if (project.plugins.hasPlugin('java')) {
                    task sourcesJar(type: Jar, dependsOn: classes) {
                        archiveClassifier.set('sources')
                        from sourceSets.main.allSource
                    }

                    task javadocsJar(type: Jar, dependsOn: javadoc) {
                        archiveClassifier.set('javadoc')
                        from javadoc.destinationDir
                    }

                    from components.java
                    artifact sourcesJar
                    artifact javadocsJar
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() }
        sign publishing.publications
    }
}
