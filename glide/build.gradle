apply plugin: 'java'

// The paths of Android projects that should be included in the jar and javadoc.
static def getAndroidPathsForJar() {
    [':third_party:gif_decoder', ':library']
}

// The paths of Java projects that should be included in the jar and javadoc.
static def getJavaPathsForJar() {
    [':third_party:disklrucache']
}

// The paths of Android projects that should be included only in Javadoc, not in the jar.
static def getAndroidPathsForJavadoc() {
    [
            ':integration:okhttp',
            ':integration:okhttp3',
            ':integration:volley',
            ':integration:gifencoder'
    ]
}

// The paths of Java projects that should be included only in Javadoc, not in the jar.
static def getJavaPathsForJavadoc() {
    [':annotation', ':annotation:compiler']
}

(getAndroidPathsForJavadoc() + getAndroidPathsForJar() +
        getJavaPathsForJar() + getJavaPathsForJavadoc()).forEach {
    evaluationDependsOn(it)
}

def asProjects(paths) {
    paths.collect { project(it) }
}

def getAndroidSdkDirectory() {
    project(':library').android.sdkDirectory
}

def getAndroidCompileSdkVersion() {
    project(':library').android.compileSdkVersion
}

def getInternalAndroidProjectsForJar() {
    asProjects(getAndroidPathsForJar())
}

def getInternalJavaProjectsForJar() {
    asProjects(getJavaPathsForJar())
}

def getInternalAndroidProjectsForJavadoc() {
    asProjects(getAndroidPathsForJavadoc())
}

def getInternalJavaProjectsForJavadoc() {
    asProjects(getJavaPathsForJavadoc())
}

def getReleaseVariantAndroidProjectsForJar() {
    getAndroidLibraryVariantsForJar('release')
}

def getAndroidLibraryVariantsForJar(variantName) {
    getAndroidLibraryVariants(getInternalAndroidProjectsForJar(), variantName)
}

def getAndroidLibraryVariantsForJavadoc(variantName) {
    getAndroidLibraryVariants(getInternalAndroidProjectsForJavadoc(), variantName)
}

static def getAndroidLibraryVariants(projects, variantName) {
    projects.collect { project ->
        project.android.libraryVariants.findAll { type ->
            type.buildType.name.equalsIgnoreCase(variantName)
        }
    }.sum()
}

def getSourceFilesForVariantJar(variantName) {
    getAndroidLibraryVariantsForJar(variantName).collect { it.javaCompile.source } +
            getInternalJavaProjectsForJar().collect { it.sourceSets.main.allJava }
}

def getSourceFilesForVariantJavadoc(variantName) {
    getAndroidLibraryVariantsForJavadoc(variantName).collect { it.javaCompile.source } +
            getInternalJavaProjectsForJavadoc().collect { it.sourceSets.main.allJava }
}

def getAndroidJar() {
    "${getAndroidSdkDirectory()}/platforms/${getAndroidCompileSdkVersion()}/android.jar"
}

def getSupportJar() {
    "${getAndroidSdkDirectory()}/extras/android/support/v4/android-support-v4.jar"
}

project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"

// Generate javadocs and sources containing batched documentation and sources for all internal
// projects.
['release', 'debug'].each { variantName ->

    task("${variantName}SourceJar", type: Jar) {
      from getSourceFilesForVariantJar(variantName)
    }

    def javadocTask = task("${variantName}Javadoc", type: Javadoc) {
        source = getSourceFilesForVariantJar(variantName)
        source += getSourceFilesForVariantJavadoc(variantName)

        def classpathFiles = files(getAndroidLibraryVariantsForJar(variantName).collect {
            files(it.javaCompile.classpath.files, getAndroidJar(), getSupportJar())
        })
        classpathFiles += files(getAndroidLibraryVariantsForJavadoc(variantName).collect {
            files(it.javaCompile.classpath.files, getAndroidJar(), getSupportJar())
        })
        classpathFiles += (getInternalJavaProjectsForJavadoc().collect {
            it.sourceSets.main.compileClasspath.files
        }.flatten())
        classpathFiles += (getInternalJavaProjectsForJar().collect {
            it.sourceSets.main.compileClasspath.files
        }.flatten())
        // Finds dependencies of Android packages that would otherwise be ignored (Volley in
        // particular)
        classpathFiles += getInternalAndroidProjectsForJavadoc().collect {
            files("${it.projectDir}/build/intermediates/classes/release")
        }
        classpath = files(classpathFiles)

        options {
            links("http://docs.oracle.com/javase/7/docs/api/")
            links("https://square.github.io/okhttp/3.x/okhttp/")
            links("https://square.github.io/okhttp/2.x/okhttp/")
            // TODO: Ideally this would point to something hosted by Android.
            links("http://afzaln.com/volley/")
            linksOffline("http://d.android.com/reference",
                    "${getAndroidSdkDirectory()}/docs/reference")
        }

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    } as Javadoc

    def cleanJavadocTask = task("clean${variantName.capitalize()}Javadoc", type: Delete) {
        delete javadocTask.destinationDir
    } as Task
    clean.dependsOn(cleanJavadocTask)

    def javadocJarTask = task("${variantName}JavadocJar", type: Jar) {
        from javadocTask.destinationDir
    } as Task
    javadocJarTask.dependsOn(javadocTask)
}

jar {
    from files(
            getReleaseVariantAndroidProjectsForJar().collect { variant ->
                variant.javaCompile.destinationDir
            }
    )
    exclude "**/R.class"
    exclude "**/BuildConfig.class"
    from files(getInternalJavaProjectsForJar().collect { it.sourceSets.main.output })
}

def getAllInternalProjectBuildDeps() {
    getInternalAndroidProjectsForJar() + getInternalJavaProjectsForJar() +
            getInternalJavaProjectsForJavadoc() + getInternalAndroidProjectsForJavadoc()
}

getAllInternalProjectBuildDeps().each { project ->
    releaseJavadoc.dependsOn(project.tasks.assemble)
    debugJavadoc.dependsOn(project.tasks.assemble)
    jar.dependsOn(project.tasks.build)
}

artifacts {
    archives releaseJavadocJar {
        classifier 'javadoc'
    }
    archives releaseSourceJar {
        classifier 'sources'
    }
}
